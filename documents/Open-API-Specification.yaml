openapi: 3.0.0
info:
  title: BookMania User microservice - OpenAPI
  version: 1.1.0
  description: API for managing Users, Books, Reports, Connections and Statistics.
servers:
  - url: 'http://localhost:8081/c/'

tags:
  - name: Authentication
    description: API endpoints for managing authentication
  - name: Users
    description: API endpoints for managing users
  - name: Reports
    description: API endpoints for managing reports
  - name: Books
    description: API endpoints for managing books
  - name: Statistics
    description: API endpoints for managing statistics
  - name: Connections
    description: API endpoints for managing connections
  - name: Search
    description: API endpoints for managing search based on username, favourite genres or favourite book
  - name: Unauthenticated
    description: API endpoints for interaction with other microservices(that do not require authentication)


paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Register a new user with email, username, and password. The username may one contain alphanumerical characters. Both the username and the email must be unique in the system.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '200':
          description: OK if the registration succeeds.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Username or email already in use!
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /authenticate:
    post:
      tags:
        - Authentication
      summary: Authenticate a user
      description: Authenticate a user with username and password. The JWT token will be returned if the authentication is successful.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequestModel'
      responses:
        '200':
          description: OK if the authentication succeeds. It will return the JWT token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the credentials are invalid
          content:
            text/plain:
              examples:
                UserDisabled:
                  value:
                    USER_DISABLED
                InvalidCredentials:
                  value:
                    INVALID_CREDENTIALS
        '500':
          description: Internal Server Error if an unexpected error occurs.
  
  /users:
    get:
      tags:
        - Users
      summary: Retrieve the profile information of a user
      description: Get the most important (and non-sensitive) profile information of a user based on the JWT token provided in the headers. This is meant to be used only by the user who owns the profile (requires JWT), this is why it returns whether or not it is private and similar other things. This endpoint requires authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized if the JWT token is invalid
        '500':
          description: Internal Server Error if an unexpected error occurs.
    
    delete:
      tags:
        - Users
      summary: A user can delete their own account
      description: Delete a user account based on the JWT token provided. This endpoint requires authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK if the account was successfully deleted.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not Found
        '500':
          description: Internal Server Error if an unexpected error occurs.
  
  /users/name:
    patch:
      tags:
        - Users
      summary: Update AppUser name
      description: Update the name of a user. The user is found using the JWT token. Users cannot update other user's profile. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: New Name
      responses:
        '200':
          description: OK if the update was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /users/bio:
    patch:
      tags:
        - Users
      summary: Update AppUser bio
      description: Update the bio of a user. The user is found using the JWT token. Users cannot update other user's profile. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: New Bio
      responses:
        '200':
          description: OK if the update was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '500':
          description: Internal Server Error if an unexpected error occurs.
  
  /users/picture:
    get:
      tags:
        - Users
      summary: Retrieve a user's profile picture
      description: Get the profile picture of a user. The user is found using the JWT token. This endpoint requires authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized if the JWT token is invalid
        '500':
          description: Internal Server Error if an unexpected error occurs.
    
    patch:
      tags:
        - Users
      summary: Update AppUser profile picture
      description: Update the photo of a user. The user is found using the JWT token. Users cannot update other user's profile. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: OK is the update was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error if an unexpected error occurs.
  
  /users/location:
    patch:
      tags:
        - Users
      summary: Update AppUser location
      description: Update the location of a user. The user is found based on the JWT token provided. Users cannot update other user's profile. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: New Location
      responses:
        '200':
          description: OK if the update was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /users/favouriteGenres:
    patch:
      tags:
        - Users
      summary: Update AppUser list of favourite genres
      description: Update the favourite genres of a user. The user is found using the JWT token. Users cannot update other user's profile. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Genre"
      responses:
        '200':
          description: OK is the update was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /users/favouriteBook:
    patch:
      tags:
        - Users
      summary: Update AppUser favourite book
      description: Update the favourite book of a user. The user is found using the JWT token. Users cannot update other user's profile. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: uuid
              description: The id of the book.
      responses:
        '200':
          description: OK if the update was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Book not found
        '500':
          description: Internal Server Error if an unexpected error occurs.
  
  /users/username:
    patch:
      tags:
        - Users
      summary: Update AppUser username
      description: Update the username of a user. The username must be unique and must only contain alphanumerical characters. The user is found based on the JWT token. Users cannot update other user's profile. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: New Username
      responses:
        '200':
          description: OK if the update was successful.
        '400':
          description: Bad Request if the required parameters are not present
        '401':
          description: Unauthorized if the JWT token is invalid or if the username does not adhere to the uniqueness and alphanumerical constraints
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /users/email:
    patch:
      tags:
        - Users
      summary: Update AppUser email
      description: Update the email of a user. The email must be unique in the system. The user is found using the JWT token. Users cannot update other user's profile. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: new@email.com
      responses:
        '200':
          description: OK if the update was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid or if the email does not adhere to the uniqueness constraint
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /users/password:
    patch:
      tags:
        - Users
      summary: Update AppUser password
      description: Update the password of a user. The user is found using the JWT token. Users cannot update other user's profile. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: New Password
      responses:
        '200':
          description: OK if the update was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '500':
          description: Internal Server Error if an unexpected error occurs.
  
  /users/isPrivate:
    patch:
      tags:
        - Users
      summary: Update privacy info
      description: Update privacy information of a user. The user is found using the JWT token. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              format: boolean
              example: false
      responses:
        '200':
          description: OK if the update was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not Found
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /users/authority:
    patch:
      tags:
        - Users
      summary: An admin changes the authority of a user
      description: An admin changes the authority of a user, based on the information found in the RequestRoleChange object, into an admin or an author. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestRoleChange'
      responses:
        '200':
          description: OK if the change was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid or the user is not an admin.
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error if an unexpected error occurs.
  
  /roleChangeRequests:
    get:
      tags:
        - Users
      summary: Get the requests for role change (only by admin)
      description: Retrieve a list of user role change requests. This endpoint requires authentication and the user to be an admin.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestRoleChange'
        '401':
          description: Unauthorized if the JWT token is invalid or the user is not an admin
        '500':
          description: Internal Server Error if an unexpected error occurs.

    post:
      tags:
        - Users
      summary: A user requests a role change
      description: A user requests a role change into an admin or an author. The information is provided in the body. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestRoleChange'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /users/isDeactivated:
    patch:
      tags:
        - Users
      summary: Ban or unban user
      description: Deactivate or activate the account of a reported user. Requires admin role.  This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanUserRequest'
      responses:
        '200':
          description: OK if the user was successfully banned.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not Found
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /users/is2faEnabled:
    patch:
      tags:
        - Users
      summary: Activate or deactivate 2-factor authentication
      description: Activate or deactivate 2-factor authentication for the user. The user is found using the JWT token.  This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              format: boolean
              example: true
      responses:
        '200':
          description: OK if it was successfully changed.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not Found
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /reports:
    get:
      tags:
        - Reports
      summary: Get a list of reports (only for admins)
      description: Retrieve a list of Report objects. The endpoint is only accessible to admins.  This endpoint requires authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT is not valid or if the JWT does not correspond to an admin.
        '500':
          description: Internal Server Error if an unexpected error occurs.
    
    post:
      tags:
        - Reports
      summary: Report an AppUser
      description: Report an AppUser with the specified username.  This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
      responses:
        '200':
          description: OK if the operation was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not Found
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error if an unexpected error occurs.
    
  /reports/{reportId}:
    delete:
      tags:
        - Reports
      summary: Remove a user report
      description: Remove a specific report for a user. Requires admin role.  This endpoint requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          description: The id of the report to remove.
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: OK if the deletion was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT is invalid or the JWT does not correspond to an admin.
        '404':
          description: If the reportId is not found.
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /stats/{userId}:
    get:
      tags:
        - Statistics
      summary: Get login statistics for a user (number of times they accessed /authenticate)
      description: Retrieve login statistics for a user. This endpoint requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The username of an AppUser
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                numberOfLogins: 5
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the token is not valid.
        '404':
          description: Not Found if the user was not found.
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /stats/popularGenres:
    get:
      tags:
        - Statistics
      summary: Get popular genres (based on users' favorite genres)
      description: Retrieve the 3 most popular genres and statistics about them.  This endpoint requires authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      $ref: '#/components/schemas/Genre'
                    value:
                      type: integer
                      example: 13
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the token is not valid.
        '500':
          description: Internal Server Error

  /stats/popularBooks:
    get:
      tags:
        - Statistics
      summary: Get the 3 most popular books (based on favorite book)
      description: Retrieve popular books based on favorite book selections.  This endpoint requires authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the token is not valid.
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /validate-token:
    get:
      tags:
        - Authentication
      summary: Validate JWT token and return user id and the authority
      description: Validate a JWT token and return the corresponding userId (uuid format) and the authority. The JWT token is provided in the headers, as usual. This endpoint requires authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationTokenResponse'
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /users/{username}:
    get:
      tags:
        - Search
      summary: Search for a user based on username
      description: Search for a user based on username.  This endpoint requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: The username of an AppUser
          schema:
            type: string
            example: ExampleUsername
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not Found
        '500':
          description: Internal Server Error if an unexpected error occurs.

    delete:
      tags:
        - Users
      summary: An admin can delete another user's account
      description: Delete a user account by username. This endpoint requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user to be deleted
          schema:
            type: string
            example: ExampleUsername
      responses:
        '200':
          description: OK if it was successfully deleted.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not Found
        '500':
          description: Internal Server Error if an unexpected error occurs.
  
  /users/favBook:
    get:
      tags:
        - Search
      summary: Search for users based on favorite book
      description: Search for users based on their favourite book. This endpoint requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: favouriteBookId
          in: query
          description: The ID of a book
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /users/favGenres:
    post:
      tags:
        - Search
      summary: Search for users based on favorite genres
      description: Search for a user based on a list of favourite genres. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Genre'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '500':
          description: Internal Server Error if an unexpected error occurs.
  
  /books:
    post:
      tags:
        - Books
      summary: Create a new book (only the admins and the authors - if they wrote the book)
      description: Create a new book with title, author, genre(s), description and number of pages. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookRequestModel'
      responses:
        '200':
          description: OK if it was successful
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '409':
          description: Conflict if the book is already in the DB
          content:
            text/plain:
              example: Book is already in the DB
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error if an unexpected error occurs.
    
    put:
      tags:
        - Books
      summary: Update Book
      description: Update book details. Requires admin role or the authenticated user is the author of the book. This endpoint requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: OK if the update was successful.
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /books/{bookId}:
    get:
      tags:
        - Books
      summary: Retrieve a book by its id
      description: Return a book by its id. This endpoint requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          description: The ID of the book to retrieve
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not found
        '500':
          description: Internal Server Error if an unexpected error occurs.

    delete:
      tags:
        - Books
      summary: Delete a book
      description: Delete a book by bookId. Requires admin role or the authenticated user is the author of the book. This endpoint requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          description: The ID of the book to be deleted
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not Found
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /connections/{username}:
    post:
      tags:
        - Connections
      summary: Follow a user
      description: Follow a user with the specified username.  This endpoint requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user to follow
          schema:
            type: string
            example: ExampleUsername
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not Found
        '500':
          description: Internal Server Error if an unexpected error occurs.

    delete:
      tags:
        - Connections
      summary: Unfollow a user
      description: Unfollow a user with the specified username. This endpoint requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user to unfollow
          schema:
            type: string
            example: ExampleUsername
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not Found
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /connections/followers/{username}:
    get:
      tags:
        - Connections
      summary: Get a list of users that follow a specific user
      description: Get a list of all users that follow the user with the specified username. This endpoint requires authentication.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user to get followers
          schema:
            type: string
            example: ExampleUsername
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not Found
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /connections/follows/{username}:
    get:
      tags:
        - Connections
      summary: Get a list of users that are followed by a specific user
      description: Get a list of all users that are followed by the user with the specified username. This endpoint requires authentication.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user to get followers
          schema:
            type: string
            example: ExampleUsername
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'
        '400':
          description: Bad Request if the required parameters are not present.
        '401':
          description: Unauthorized if the JWT token is invalid
        '404':
          description: Not Found
        '500':
          description: Internal Server Error if an unexpected error occurs.

  /unauthenticated/{userId}:
    get:
      tags:
        - Unauthenticated
      summary: Retrieve the profile information of a user
      description: Get the most important (and non-sensitive) profile information of a user based on the userId provided in the path.
      parameters:
        - name: userId
          in: path
          required: true
          description: The userId of the targeted user
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error if an unexpected error occurs.

components:
  schemas:
    BanUserRequest:
      type: object
      properties:
        isBanned:
          type: boolean
          description: A boolean value - banned / not banned
          example: false
        username:
          type: string
          description: The username of the targeted user
          example: ExampleUsername
    
    UserProfile:
      type: object
      properties:
        username:
          type: string
          description: The username
          example: johndoe
        email:
          type: string
          format: email
          description: The email address of the user
          example: johndoe@example.com
        name:
          type: string
          description: The full name of the user
          example: John Doe
        bio:
          type: string
          description: A brief biographical description of the user
          example: I'm an avid reader and enjoy exploring different genres of literature.
        location:
          type: string
          description: The user's location
          example: New York, NY
        favouriteGenres:
          type: array
          items:
            $ref: "#/components/schemas/Genre"
          description: The user's favorite genres of literature
          example: [
            BIOGRAPHY,
            HISTORY,
            FANTASY
          ]
        favouriteBook:
          $ref: '#/components/schemas/Book'
        authority:
          $ref: "#/components/schemas/Authority"
        isDeactivated:
          type: boolean
          description: Whether the account is banned or not.
          example: false
        isPrivate:
          type:
            boolean
          description: Whether the account is private or not.
          example: true
        is2faEnabled:
          type:
            boolean
          description: Whether the two factor authentication is enabled or not.
          example: false

    UserModel:
      type: object
      properties:
        username:
          type: string
          description: The username
          example: johndoe
        email:
          type: string
          format: email
          description: The email address of the user
          example: johndoe@example.com
        name:
          type: string
          description: The full name of the user
          example: John Doe
        bio:
          type: string
          description: A brief biographical description of the user
          example: I'm an avid reader and enjoy exploring different genres of literature.
        location:
          type: string
          description: The user's location
          example: New York, NY
        favouriteGenres:
          type: array
          items:
            $ref: "#/components/schemas/Genre"
          description: The user's favorite genres of literature
          example: [
            BIOGRAPHY,
            HISTORY,
            FANTASY
          ]
        favouriteBook:
          $ref: '#/components/schemas/Book'

    RegisterUserRequest:
      type: object
      properties:
        username:
          type: string
          description: The username. Must contain only alphanumerical characters.
          example: jhondoe
        email:
          type: string
          description: The email of the user
          example: johndoe@example.com
        password:
          type: string
          description: The password of the user
          example: password123

    AuthenticationRequestModel:
      type: object
      properties:
        username:
          type: string
          description: The username
          example: jhondoe
        password:
          type: string
          description: The password of the user
          example: pass123

    CreateBookRequestModel:
      type: object
      properties:
        title:
          type: string
          description: The title of the book
          example: "The Adventures of Tom Sawyer"
        authors:
          type: array
          items:
            type: string
          description: An array of author names
          example: [
            Mark Twain
          ]
        genres:
          type: array
          items:
            $ref: "#/components/schemas/Genre"
          description: An array of genres
          example: [
            BIOGRAPHY,
            MYSTERY
          ]
        description:
          type: string
          description: A brief description of the book
          example: "A classic coming-of-age story about the adventures of Tom Sawyer in a small town along the Mississippi River."
        numPages:
          type: integer
          description: The number of pages in the book.
          example: 123

    Book:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the book
          example: "b123e456-7890-1234-5678-9abcdef01234"
        title:
          type: string
          description: The title of the book
          example: "The Adventures of Tom Sawyer"
        authors:
          type: array
          items:
            type: string
          description: An array of author names
          example: [
            "Mark Twain",
            "J.K. Rowling",
            "Harper Lee"
          ]
        genre:
          type: array
          items:
            $ref: "#/components/schemas/Genre"
          description: An array of genres
          example: [
            SCIENCE,
            MYSTERY
          ]
        description:
          type: string
          description: A brief description of the book
          example: "A classic coming-of-age story about the adventures of Tom Sawyer in a small town along the Mississippi River."
        numPages:
          type: integer
          description: The number of pages in the book
          example: 275

    RequestRoleChange:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
          description: The id of the user that requested a role change.
        newRole:
          $ref: "#/components/schemas/Authority"
        ssn:
          type: string
          description: The Social Security Number of the user, which confirms their identity.
          example: 123-45-6789

    ValidationTokenResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        authority:
          $ref: "#/components/schemas/Authority"

    Report:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
          description: This is the id which is given by the Review Microservice, which points to their entity.
        type:
          type: string
          enum: 
            - COMMENT
            - REVIEW
          description: The type of report, either COMMENT or REVIEW
          example: COMMENT
        userId:
          type: string
          format: uuid
          description: The ID of the targeted user
          example: 550e8400-e29b-41d4-a716-446655440000
        text:
          type: string
          description: The text content of the report
          example: Example description of the report.
    
    Genre:
      type: string
      enum:
        - BIOGRAPHY
        - HISTORY
        - SCIENCE
        - CRIME
        - POETRY
        - MYSTERY
        - SCIENCE_FICTION
        - FANTASY
        - ROMANCE
        - HORROR
        - DRAMA
      description: An enum with the possible book genres
      example: MYSTERY
  
    Authority:
      type: string
      enum:
        - REGULAR_USER
        - AUTHOR
        - ADMIN
      description: The role of a user.
      example: ADMIN

    JWTToken:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTYyMjc1OSwiaWF0IjoxNzAxNTM2MzU5LCJhdXRob3JpdGllcyI6WyJBRE1JTiJdfQ.dLR52lm04tZLld-zeFigKSAsO__ixbw45edGQVxlnSTz4PXDAqUXQaBbw6SAXOkPWEJuSsp7D_u0K34HvLi7HQ
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer Token authentication using JWT
